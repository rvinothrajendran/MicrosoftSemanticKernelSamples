using LLMModelFactory;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.Agents.Orchestration.Sequential;
using Microsoft.SemanticKernel.Agents.Runtime.InProcess;

namespace SequentialPattern
{
#pragma warning disable SKEXP0110
#pragma warning disable SKEXP0001
    internal class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("Agent Sequential Orchestration Pattern");

            var kernel = KernelFactory.CreateKernelBuilder(LLMModel.Ollama);

            ChatCompletionAgent intentAgent = CreateIntentAgent(kernel);

            ChatCompletionAgent emailAgent = CreateEmailAgent(kernel);
            
            ChatCompletionAgent toneAgent = CreateToneAgent(kernel);


            SequentialOrchestration sequentialOrchestration =
                new SequentialOrchestration(intentAgent, emailAgent, toneAgent )
                {
                    ResponseCallback = ResponseCallback
                };

            var input = "My friend invited me to their birthday party next week. I want to thank them and confirm that I will attend.";

            InProcessRuntime inProcessRuntime = new InProcessRuntime();
            await inProcessRuntime.StartAsync();

            var result = await sequentialOrchestration.InvokeAsync(input, inProcessRuntime);

            var finalResult = await result.GetValueAsync();

            Console.WriteLine(finalResult);

            await inProcessRuntime.RunUntilIdleAsync();

            Console.Read();
        }

        private static ValueTask ResponseCallback(ChatMessageContent response)
        {
            var resultCallback = $"Agent Name : {response.AuthorName},{response.Role},{response.Content}";

            Console.WriteLine(resultCallback);
            
            return ValueTask.CompletedTask;
        }

        private static ChatCompletionAgent CreateToneAgent(Kernel kernel)
        {
            return new ChatCompletionAgent
            {
                Name = "ToneAgent",
                Description = "Checks and edits the tone of the email to ensure it is friendly and polite.",
                Instructions = "You are a Tone Checker and Editor Agent. You will receive an email text generated by the EmailAgent.\n" +
                               "Your job is to check if the tone is friendly and polite. If the tone is fine, respond with:\n" +
                               "\"The tone is friendly and polite. No changes needed.\"\n\n" +
                               "If the tone could be improved, revise the email and return the corrected version prefixed with:\n" +
                               "\"Corrected Email:\"\n\n" +
                               "Only output the final result—no explanations.",
                Kernel = kernel.Clone(),
            };
        }

        private static ChatCompletionAgent CreateEmailAgent(Kernel kernel)
        {
            return new ChatCompletionAgent
            {
                Name = "EmailAgent",
                Description = "Composes a friendly and polite email based on the user's intent.",
                Instructions = "You are an Email Composer Agent. Your task is to generate a short, friendly, and polite email based on the user's intent.\n" +
                               "You will receive a JSON input like:\n" +
                               "{\n  \"intent\": \"Thank a friend and confirm attendance at a birthday party\"\n}\n\n" +
                               "Compose a natural and human-sounding email reflecting this intent. " +
                               "Do not add greetings like 'Dear Assistant'. Only output the email body.\n\n" +
                               "This email will be sent to the ToneAgent for review." + 
                               "Always get the intent agant from Intent agent ",
                Kernel = kernel.Clone(),
            };
        }

        private static ChatCompletionAgent CreateIntentAgent(Kernel kernel)
        {
            return new ChatCompletionAgent
            {
                Name = "IntentAgent",
                Description = "Extracts the user's intent from input text.",
                Instructions = "You are an Intent Extraction Agent. Read the user's input and identify their core intent. " +
                               "Respond strictly in this JSON format:\n" +
                               "{\n  \"intent\": \"[brief description of what the user wants to achieve]\"\n}\n\n" +
                               "This output will be passed directly to the EmailAgent for composing an email.",
                Kernel = kernel.Clone(),
            };
        }
    }
}
